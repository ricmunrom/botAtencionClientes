import os
from typing import Dict, Any, List, Optional
from langchain.tools import BaseTool
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.schema import BaseMessage
from pydantic import BaseModel, Field
from estado_global import EstadoGlobal, GestorEstados
from conocimiento_kavak import buscar_informacion


class PropuestaValorTool(BaseTool):
    """
    Tool para responder informaci√≥n b√°sica sobre la propuesta de valor.
    Proporciona informaci√≥n general sobre servicios, garant√≠as, proceso de compra, etc.
    """
    
    name: str = "propuesta_valor"
    description: str = "Proporciona informaci√≥n b√°sica sobre la propuesta de valor, servicios, garant√≠as y beneficios de Kavak. Usa esta tool para preguntas sobre: sedes/ubicaciones, certificaci√≥n de autos, proceso digital, financiamiento, garant√≠as, app, o informaci√≥n general de la empresa"
    gestor_estados: GestorEstados = Field(exclude=True)
    telefono_actual: str = Field(exclude=True)
    
    def __init__(self, gestor_estados: GestorEstados, **kwargs):
        super().__init__(gestor_estados=gestor_estados, telefono_actual="", **kwargs)
        
    def _run(self, query: str) -> str:
        """
        Ejecutar tool de propuesta de valor
        
        Args:
            query: Consulta del usuario sobre informaci√≥n general
            
        Returns:
            Respuesta con informaci√≥n de propuesta de valor
        """
        try:
            
            # Obtener el estado del usuario actual
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            
            # Registrar la consulta en el estado global
            estado.actualizar('ultima_consulta', f"propuesta_valor: {query}")
            estado.actualizar('tipo_consulta', 'informacion_general')
            
            # Buscar informaci√≥n relevante usando la base de conocimiento
            respuesta = buscar_informacion(query)
            
            # Registrar que se proporcion√≥ informaci√≥n
            estado.actualizar('ultima_respuesta_tipo', 'propuesta_valor')
            
            # Agregar contexto amigable a la respuesta
            respuesta_final = f"¬°Hola! Te comparto la informaci√≥n sobre Kavak:\n\n{respuesta}\n\n¬øTe gustar√≠a saber algo m√°s espec√≠fico o necesitas ayuda con algo m√°s?"
            
            return respuesta_final
            
        except ImportError:
            return "Lo siento, hay un problema t√©cnico con la informaci√≥n. ¬øPodr√≠as ser m√°s espec√≠fico sobre qu√© te gustar√≠a saber de Kavak?"
        
        except Exception as e:
            print(f"Error en PropuestaValorTool: {e}")
            return "Disculpa, ocurri√≥ un error al buscar la informaci√≥n. ¬øPodr√≠as reformular tu pregunta sobre Kavak?"


class CatalogoTool(BaseTool):
    """
    Tool para brindar recomendaciones de autos disponibles en el cat√°logo
    seg√∫n las preferencias del cliente.
    """
    
    name: str = "catalogo_autos"
    description: str = "Busca y recomienda autos del cat√°logo basado en preferencias como presupuesto, marca, modelo, a√±o, tipo de veh√≠culo, kilometraje, caracter√≠sticas (bluetooth, carplay). Usa esta tool cuando el usuario quiera ver autos disponibles, buscar un auto espec√≠fico, o pida recomendaciones de veh√≠culos."
    gestor_estados: GestorEstados = Field(exclude=True)
    telefono_actual: str = Field(exclude=True)
    
    def __init__(self, gestor_estados: GestorEstados, **kwargs):
        super().__init__(gestor_estados=gestor_estados, telefono_actual="", **kwargs)
    
    def _run(self, preferencias: str) -> str:
        """
        Ejecutar b√∫squeda en cat√°logo
        
        Args:
            preferencias: Preferencias del cliente (presupuesto, marca, modelo, etc.)
            
        Returns:
            Recomendaciones de autos del cat√°logo
        """
        try:
            # Importar m√≥dulos necesarios
            from catalogo_autos import CatalogoAutos, formatear_lista_autos
            
            # Obtener el estado del usuario actual
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            
            # Registrar consulta y preferencias en estado global
            estado.actualizar('ultima_consulta', f"catalogo: {preferencias}")
            estado.actualizar('cliente_preferencias', preferencias)
            estado.actualizar('tipo_consulta', 'busqueda_catalogo')
            
            print(f"üîç DEBUG CatalogoTool: Buscando autos con preferencias: {preferencias}")
            
            # Inicializar cat√°logo
            catalogo = CatalogoAutos()
            
            # Buscar autos seg√∫n preferencias
            autos_encontrados = catalogo.buscar_autos(preferencias)
            
            print(f"üîç DEBUG CatalogoTool: Encontrados {len(autos_encontrados)} autos")
            
            # Guardar resultados en el estado
            estado.actualizar_autos_recomendados(autos_encontrados)
            
            # Si se encontraron autos, guardar filtros aplicados
            if autos_encontrados:
                # Extraer filtros para guardar en estado
                filtros_aplicados = catalogo._extraer_filtros(preferencias)
                estado.actualizar_filtros_busqueda(filtros_aplicados)
                
                print(f"üîç DEBUG CatalogoTool: Filtros aplicados: {filtros_aplicados}")
            
            # Detectar si el usuario muestra inter√©s espec√≠fico en un auto
            if autos_encontrados:
                auto_especifico = self._detectar_auto_especifico(preferencias, autos_encontrados)
                
                if auto_especifico:
                    # Guardar el auto espec√≠fico en el estado
                    estado.actualizar_auto_seleccionado(auto_especifico)
                    print(f"üîç DEBUG CatalogoTool: Auto espec√≠fico guardado: {auto_especifico.get('make')} {auto_especifico.get('model')} {auto_especifico.get('year')}")
            
            # Formatear respuesta
            respuesta_formateada = formatear_lista_autos(autos_encontrados)
            
            # Registrar que se proporcionaron recomendaciones
            estado.actualizar('ultima_respuesta_tipo', 'catalogo_autos')
            
            # Agregar contexto adicional
            if autos_encontrados:
                respuesta_final = f"{respuesta_formateada}\n\nüí° Tambi√©n puedo ayudarte con el financiamiento de cualquiera de estos autos si te interesa."
            else:
                # Sugerir alternativas si no se encontraron autos
                estadisticas = catalogo.obtener_estadisticas()
                marcas_disponibles = estadisticas.get('marcas_disponibles', [])[:5]  # Top 5 marcas
                
                respuesta_final = f"{respuesta_formateada}\n\nüí° Tenemos autos de estas marcas disponibles: {', '.join(marcas_disponibles)}\n\n¬øTe gustar√≠a ajustar tu b√∫squeda o ver opciones de alguna marca espec√≠fica?"
            
            return respuesta_final
            
        except ImportError as e:
            print(f"‚ùå ERROR ImportError en CatalogoTool: {e}")
            return "Lo siento, hay un problema t√©cnico con el cat√°logo. ¬øPodr√≠as intentar de nuevo en un momento?"
        
        except Exception as e:
            print(f"‚ùå ERROR en CatalogoTool: {e}")
            import traceback
            traceback.print_exc()
            return "Disculpa, ocurri√≥ un error al buscar en el cat√°logo. ¬øPodr√≠as reformular tu b√∫squeda o ser m√°s espec√≠fico sobre qu√© tipo de auto buscas?"
    
    def _detectar_auto_especifico(self, preferencias: str, autos_encontrados: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """
        Detectar si el usuario est√° preguntando por un auto espec√≠fico
        
        Args:
            preferencias: Texto de preferencias del usuario
            autos_encontrados: Lista de autos encontrados
            
        Returns:
            Auto espec√≠fico si se detecta inter√©s, None en caso contrario
        """
        if not autos_encontrados:
            return None
        
        preferencias_lower = preferencias.lower()
        
        # Detectar palabras que indican inter√©s espec√≠fico
        palabras_interes = [
            'quiero el', 'me interesa el', 'detalles del', 'informaci√≥n del',
            'dime sobre el', 'cu√©ntame del', 'ese auto', 'este auto',
            'quiero detalles', 'm√°s informaci√≥n', 'me gusta el'
        ]
        
        # Si hay indicadores de inter√©s espec√≠fico
        for palabra in palabras_interes:
            if palabra in preferencias_lower:
                print(f"üîç DEBUG: Detectada palabra de inter√©s: {palabra}")
                
                # Si solo hay un auto encontrado, ese es el de inter√©s
                if len(autos_encontrados) == 1:
                    print(f"üîç DEBUG: Solo un auto encontrado, seleccionando autom√°ticamente")
                    return autos_encontrados[0]
                
                # Si hay m√∫ltiples, buscar coincidencia espec√≠fica en el texto
                for auto in autos_encontrados:
                    auto_descripcion = f"{auto.get('make', '')} {auto.get('model', '')}".lower()
                    if auto_descripcion in preferencias_lower:
                        print(f"üîç DEBUG: Coincidencia espec√≠fica encontrada: {auto_descripcion}")
                        return auto
                
                # Si no encuentra espec√≠fico pero hay indicador de inter√©s, tomar el primero
                print(f"üîç DEBUG: Palabra de inter√©s pero sin coincidencia espec√≠fica, tomando el primero")
                return autos_encontrados[0]
        
        # Buscar modelo espec√≠fico en las preferencias
        for auto in autos_encontrados:
            modelo = auto.get('model', '').lower()
            marca = auto.get('make', '').lower()
            a√±o = str(auto.get('year', ''))
            
            # Verificar si menciona modelo espec√≠fico
            if modelo in preferencias_lower and len(preferencias_lower.split()) <= 5:
                print(f"üîç DEBUG: Modelo espec√≠fico mencionado: {modelo}")
                return auto
            
            # Verificar si menciona marca + modelo
            if f"{marca} {modelo}" in preferencias_lower:
                print(f"üîç DEBUG: Marca + modelo mencionados: {marca} {modelo}")
                return auto
            
            # Verificar si menciona modelo + a√±o
            if modelo in preferencias_lower and a√±o in preferencias_lower:
                print(f"üîç DEBUG: Modelo + a√±o mencionados: {modelo} {a√±o}")
                return auto
        
        # Si la b√∫squeda es muy espec√≠fica (pocas palabras) y hay pocos resultados
        if len(preferencias.split()) <= 3 and len(autos_encontrados) <= 2:
            print(f"üîç DEBUG: B√∫squeda espec√≠fica con pocos resultados")
            return autos_encontrados[0]
        
        print(f"üîç DEBUG: No se detect√≥ inter√©s espec√≠fico")
        return None

class FinanzasTool(BaseTool):
    """
    Tool para calcular y otorgar planes de financiamiento.
    Calcula pagos basado en enganche, precio del auto, tasa 10% y plazos 3-6 a√±os.
    """
    
    name: str = "planes_financiamiento"
    description: str = "Calcula planes de financiamiento basado en enganche, precio del auto, tasa de inter√©s del 10% y plazos de 3 a 6 a√±os"
    gestor_estados: GestorEstados = Field(exclude=True)
    telefono_actual: str = Field(exclude=True)
    
    def __init__(self, gestor_estados: GestorEstados, **kwargs):
        super().__init__(gestor_estados=gestor_estados, telefono_actual="", **kwargs)
    
    def _run(self, parametros_financiamiento: str) -> str:
        """
        Calcular plan de financiamiento
        
        Args:
            parametros_financiamiento: Par√°metros como precio, enganche, plazo
            
        Returns:
            Plan de financiamiento calculado
        """
        # Obtener el estado del usuario actual
        estado = self.gestor_estados.obtener_estado(self.telefono_actual)
        
        # Registrar consulta en estado global
        estado.actualizar('ultima_consulta', f"financiamiento: {parametros_financiamiento}")
        
        # Por ahora solo pass - implementaremos l√≥gica despu√©s
        pass
        
        return "Plan de financiamiento - En construcci√≥n"


class AgentePrincipal:
    """
    Agente principal que coordina las tools y maneja la l√≥gica de conversaci√≥n.
    Utiliza OpenAI GPT-3.5-turbo como modelo base.
    Ahora gestiona estados separados por n√∫mero de tel√©fono.
    """
    
    def __init__(self):
        """Inicializar el agente principal con gestor de estados multiusuario"""
        
        # Inicializar gestor de estados (uno por tel√©fono)
        self.gestor_estados = GestorEstados()
        
        # Inicializar modelo OpenAI
        self.llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            temperature=0.3,
            openai_api_key=os.getenv('OPENAI_API_KEY')
        )
        
        # Inicializar tools con gestor de estados
        self.tools = [
            PropuestaValorTool(self.gestor_estados),
            CatalogoTool(self.gestor_estados),
            FinanzasTool(self.gestor_estados)
        ]
        
        # Crear prompt del sistema
        self.system_prompt = self._crear_prompt_sistema()
        
        # Crear agente
        self.agent = create_openai_tools_agent(
            self.llm, 
            self.tools, 
            self.system_prompt
        )
        
        # Crear executor
        self.agent_executor = AgentExecutor(
            agent=self.agent,
            tools=self.tools,
            verbose=True,
            return_intermediate_steps=True
        )
        
    def _crear_prompt_sistema(self) -> ChatPromptTemplate:
        prompt = ChatPromptTemplate.from_messages([
            ("system", """
            Eres un asistente de atenci√≥n al cliente especializado para Kavak M√©xico.
            
            INSTRUCCIONES IMPORTANTES:
            1. Cuando uses una herramienta, SIEMPRE utiliza su respuesta completa como base para tu respuesta final
            2. NO agregues respuestas gen√©ricas como "¬øHay algo m√°s en lo que pueda ayudarte?"
            3. Responde directamente con la informaci√≥n que te proporciona la herramienta
            
            Herramientas disponibles:
            - propuesta_valor: Para informaci√≥n sobre Kavak, beneficios, sedes, procesos, etc.
            - catalogo_autos: Para buscar veh√≠culos espec√≠ficos
            - planes_financiamiento: Para calcular opciones de pago
            
            Cuando el usuario haga una pregunta espec√≠fica, usa la herramienta apropiada y responde con esa informaci√≥n.
            """),
            ("user", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ])

        return prompt
    
    def _configurar_tools_para_usuario(self, telefono_usuario: str) -> None:
        """
        Configurar las tools para que usen el estado del usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario actual
        """
        for tool in self.tools:
            tool.telefono_actual = telefono_usuario
            
    def procesar_mensaje(self, mensaje: str, telefono_usuario: str) -> str:
        """
        Procesar mensaje del usuario y generar respuesta
        """
        try:
            # Configurar tools para el usuario actual
            self._configurar_tools_para_usuario(telefono_usuario)
            
            # Obtener estado del usuario
            estado_usuario = self.gestor_estados.obtener_estado(telefono_usuario)
            
            # Registrar el mensaje en el historial del usuario
            estado_usuario.actualizar('ultimo_mensaje', mensaje)
            
            print(f"üîç DEBUG: Procesando mensaje: {mensaje}")
            print(f"üîç DEBUG: Tools disponibles: {[tool.name for tool in self.tools]}")
            
            # Ejecutar agente
            respuesta = self.agent_executor.invoke({
                "input": mensaje
            })
            
            print(f"üîç DEBUG: Respuesta completa del agente: {respuesta}")
            print(f"üîç DEBUG: Pasos intermedios: {respuesta.get('intermediate_steps', [])}")
            
            # Extraer respuesta final
            respuesta_final = respuesta.get('output', 'Lo siento, no pude procesar tu mensaje.')
            
            # Registrar la respuesta en el estado del usuario
            estado_usuario.actualizar('ultima_respuesta', respuesta_final)
            
            return respuesta_final
            
        except Exception as e:
            print(f"‚ùå ERROR procesando mensaje para {telefono_usuario}: {e}")
            import traceback
            traceback.print_exc()
            return "Lo siento, ocurri√≥ un error procesando tu consulta. ¬øPodr√≠as intentar de nuevo?"
    
    def obtener_estado_actual(self, telefono_usuario: str) -> Dict[str, Any]:
        """
        Obtener el estado actual del agente para un usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
            
        Returns:
            Resumen del estado del usuario
        """
        estado_usuario = self.gestor_estados.obtener_estado(telefono_usuario)
        return estado_usuario.obtener_resumen()
    
    def reiniciar_conversacion(self, telefono_usuario: str) -> None:
        """
        Reiniciar la conversaci√≥n para un usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
        """
        self.gestor_estados.reiniciar_estado(telefono_usuario)
        print(f"Conversaci√≥n reiniciada para usuario: {telefono_usuario}")
    
    def obtener_historial(self, telefono_usuario: str) -> List[Dict[str, Any]]:
        """
        Obtener historial de acciones para un usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
            
        Returns:
            Lista de acciones realizadas por el usuario
        """
        estado_usuario = self.gestor_estados.obtener_estado(telefono_usuario)
        return estado_usuario.obtener('historial_acciones') or []
    
    def obtener_resumen_general(self) -> Dict[str, Any]:
        """
        Obtener resumen de todos los usuarios activos
        
        Returns:
            Diccionario con informaci√≥n de todos los usuarios
        """
        return self.gestor_estados.obtener_resumen_general()
    
    def limpiar_usuarios_inactivos(self, horas: int = 24) -> int:
        """
        Limpiar usuarios inactivos por m√°s de X horas
        
        Args:
            horas: Horas de inactividad para limpiar
            
        Returns:
            N√∫mero de usuarios eliminados
        """
        usuarios_eliminados = self.gestor_estados.limpiar_estados_antiguos(horas)
        print(f"Limpiados {usuarios_eliminados} usuarios inactivos por m√°s de {horas} horas")
        return usuarios_eliminados
    
    def obtener_usuarios_activos(self) -> List[str]:
        """
        Obtener lista de usuarios con conversaciones activas
        
        Returns:
            Lista de n√∫meros de tel√©fono activos
        """
        return self.gestor_estados.obtener_usuarios_activos()
    
    def eliminar_usuario(self, telefono_usuario: str) -> bool:
        """
        Eliminar un usuario espec√≠fico del sistema
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
            
        Returns:
            True si se elimin√≥ exitosamente
        """
        return self.gestor_estados.eliminar_estado(telefono_usuario)