import os
from typing import Dict, Any, List, Optional
from langchain.tools import BaseTool
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.schema import BaseMessage
from pydantic import BaseModel, Field
from estado_global import EstadoGlobal, GestorEstados
from conocimiento_kavak import buscar_informacion
from catalogo_autos import CatalogoAutos, formatear_lista_autos


class PropuestaValorTool(BaseTool):
    """
    Tool para responder informaci√≥n b√°sica sobre la propuesta de valor.
    Proporciona informaci√≥n general sobre servicios, garant√≠as, proceso de compra, etc.
    """
    
    name: str = "propuesta_valor"
    description: str = "Proporciona informaci√≥n b√°sica sobre la propuesta de valor, servicios, garant√≠as y beneficios de Kavak. Usa esta tool para preguntas sobre: sedes/ubicaciones, certificaci√≥n de autos, proceso digital, financiamiento, garant√≠as, app, o informaci√≥n general de la empresa"
    gestor_estados: GestorEstados = Field(exclude=True)
    telefono_actual: str = Field(exclude=True)
    
    def __init__(self, gestor_estados: GestorEstados, **kwargs):
        super().__init__(gestor_estados=gestor_estados, telefono_actual="", **kwargs)
        
    def _run(self, query: str) -> str:
        """
        Ejecutar tool de propuesta de valor
        
        Args:
            query: Consulta del usuario sobre informaci√≥n general
            
        Returns:
            Respuesta con informaci√≥n de propuesta de valor
        """
        try:
            
            # Obtener el estado del usuario actual
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            
            # Registrar la consulta en el estado global
            estado.actualizar('ultima_consulta', f"propuesta_valor: {query}")
            estado.actualizar('tipo_consulta', 'informacion_general')
            
            # Buscar informaci√≥n relevante usando la base de conocimiento
            respuesta = buscar_informacion(query)
            
            # Registrar que se proporcion√≥ informaci√≥n
            estado.actualizar('ultima_respuesta_tipo', 'propuesta_valor')
            
            # Agregar contexto amigable a la respuesta
            respuesta_final = f"¬°Hola! Te comparto la informaci√≥n sobre Kavak:\n\n{respuesta}\n\n¬øTe gustar√≠a saber algo m√°s espec√≠fico o necesitas ayuda con algo m√°s?"
            
            return respuesta_final
            
        except ImportError:
            return "Lo siento, hay un problema t√©cnico con la informaci√≥n. ¬øPodr√≠as ser m√°s espec√≠fico sobre qu√© te gustar√≠a saber de Kavak?"
        
        except Exception as e:
            print(f"Error en PropuestaValorTool: {e}")
            return "Disculpa, ocurri√≥ un error al buscar la informaci√≥n. ¬øPodr√≠as reformular tu pregunta sobre Kavak?"


class CatalogoTool(BaseTool):
    """
    Tool para brindar recomendaciones de autos disponibles en el cat√°logo
    seg√∫n las preferencias del cliente.
    """
    
    name: str = "catalogo_autos"
    description: str = "Busca y recomienda autos del cat√°logo basado en preferencias como presupuesto, marca, modelo, a√±o, tipo de veh√≠culo, kilometraje, caracter√≠sticas (bluetooth, carplay). Usa esta tool cuando el usuario quiera ver autos disponibles, buscar un auto espec√≠fico, o pida recomendaciones de veh√≠culos."
    gestor_estados: GestorEstados = Field(exclude=True)
    telefono_actual: str = Field(exclude=True)
    
    def __init__(self, gestor_estados: GestorEstados, **kwargs):
        super().__init__(gestor_estados=gestor_estados, telefono_actual="", **kwargs)
    
    def _run(self, preferencias: str) -> str:
        """
        Ejecutar b√∫squeda en cat√°logo
        
        Args:
            preferencias: Preferencias del cliente (presupuesto, marca, modelo, etc.)
            
        Returns:
            Recomendaciones de autos del cat√°logo
        """
        try:    
            # Obtener el estado del usuario actual
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            
            # Registrar consulta y preferencias en estado global
            estado.actualizar('ultima_consulta', f"catalogo: {preferencias}")
            estado.actualizar('cliente_preferencias', preferencias)
            estado.actualizar('tipo_consulta', 'busqueda_catalogo')
            
            print(f"üîç DEBUG CatalogoTool: Buscando autos con preferencias: {preferencias}")
            
            # Inicializar cat√°logo
            catalogo = CatalogoAutos()
            
            # Buscar autos seg√∫n preferencias
            autos_encontrados = catalogo.buscar_autos(preferencias)
            
            print(f"üîç DEBUG CatalogoTool: Encontrados {len(autos_encontrados)} autos")
            
            # Guardar resultados en el estado
            estado.actualizar_autos_recomendados(autos_encontrados)
            
            # Si se encontraron autos, guardar filtros aplicados
            if autos_encontrados:
                # Extraer filtros para guardar en estado
                filtros_aplicados = catalogo._extraer_filtros(preferencias)
                estado.actualizar_filtros_busqueda(filtros_aplicados)
                
                print(f"üîç DEBUG CatalogoTool: Filtros aplicados: {filtros_aplicados}")
            
            # Detectar si el usuario muestra inter√©s espec√≠fico en un auto
            if autos_encontrados:
                auto_especifico = self._detectar_auto_especifico(preferencias, autos_encontrados)
                
                if auto_especifico:
                    # Guardar el auto espec√≠fico en el estado
                    estado.actualizar_auto_seleccionado(auto_especifico)
                    print(f"üîç DEBUG CatalogoTool: Auto espec√≠fico guardado: {auto_especifico.get('make')} {auto_especifico.get('model')} {auto_especifico.get('year')}")
            
            # Formatear respuesta
            respuesta_formateada = formatear_lista_autos(autos_encontrados)
            
            # Registrar que se proporcionaron recomendaciones
            estado.actualizar('ultima_respuesta_tipo', 'catalogo_autos')
            
            # Agregar contexto adicional
            if autos_encontrados:
                respuesta_final = f"{respuesta_formateada}\n\nüí° Tambi√©n puedo ayudarte con el financiamiento de cualquiera de estos autos si te interesa."
            else:
                # Sugerir alternativas si no se encontraron autos
                estadisticas = catalogo.obtener_estadisticas()
                marcas_disponibles = estadisticas.get('marcas_disponibles', [])[:5]  # Top 5 marcas
                
                respuesta_final = f"{respuesta_formateada}\n\nüí° Tenemos autos de estas marcas disponibles: {', '.join(marcas_disponibles)}\n\n¬øTe gustar√≠a ajustar tu b√∫squeda o ver opciones de alguna marca espec√≠fica?"
            
            return respuesta_final
            
        except ImportError as e:
            print(f"‚ùå ERROR ImportError en CatalogoTool: {e}")
            return "Lo siento, hay un problema t√©cnico con el cat√°logo. ¬øPodr√≠as intentar de nuevo en un momento?"
        
        except Exception as e:
            print(f"‚ùå ERROR en CatalogoTool: {e}")
            import traceback
            traceback.print_exc()
            return "Disculpa, ocurri√≥ un error al buscar en el cat√°logo. ¬øPodr√≠as reformular tu b√∫squeda o ser m√°s espec√≠fico sobre qu√© tipo de auto buscas?"
    
    def _detectar_auto_especifico(self, preferencias: str, autos_encontrados: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """
        Detectar si el usuario est√° preguntando por un auto espec√≠fico
        
        Args:
            preferencias: Texto de preferencias del usuario
            autos_encontrados: Lista de autos encontrados
            
        Returns:
            Auto espec√≠fico si se detecta inter√©s, None en caso contrario
        """
        if not autos_encontrados:
            return None
        
        preferencias_lower = preferencias.lower()
        
        # Detectar palabras que indican inter√©s espec√≠fico
        palabras_interes = [
            'quiero el', 'me interesa el', 'detalles del', 'informaci√≥n del',
            'dime sobre el', 'cu√©ntame del', 'ese auto', 'este auto',
            'quiero detalles', 'm√°s informaci√≥n', 'me gusta el'
        ]
        
        # Si hay indicadores de inter√©s espec√≠fico
        for palabra in palabras_interes:
            if palabra in preferencias_lower:
                print(f"üîç DEBUG: Detectada palabra de inter√©s: {palabra}")
                
                # Si solo hay un auto encontrado, ese es el de inter√©s
                if len(autos_encontrados) == 1:
                    print(f"üîç DEBUG: Solo un auto encontrado, seleccionando autom√°ticamente")
                    return autos_encontrados[0]
                
                # Si hay m√∫ltiples, buscar coincidencia espec√≠fica en el texto
                for auto in autos_encontrados:
                    auto_descripcion = f"{auto.get('make', '')} {auto.get('model', '')}".lower()
                    if auto_descripcion in preferencias_lower:
                        print(f"üîç DEBUG: Coincidencia espec√≠fica encontrada: {auto_descripcion}")
                        return auto
                
                # Si no encuentra espec√≠fico pero hay indicador de inter√©s, tomar el primero
                print(f"üîç DEBUG: Palabra de inter√©s pero sin coincidencia espec√≠fica, tomando el primero")
                return autos_encontrados[0]
        
        # Buscar modelo espec√≠fico en las preferencias
        for auto in autos_encontrados:
            modelo = auto.get('model', '').lower()
            marca = auto.get('make', '').lower()
            a√±o = str(auto.get('year', ''))
            
            # Verificar si menciona modelo espec√≠fico
            if modelo in preferencias_lower and len(preferencias_lower.split()) <= 5:
                print(f"üîç DEBUG: Modelo espec√≠fico mencionado: {modelo}")
                return auto
            
            # Verificar si menciona marca + modelo
            if f"{marca} {modelo}" in preferencias_lower:
                print(f"üîç DEBUG: Marca + modelo mencionados: {marca} {modelo}")
                return auto
            
            # Verificar si menciona modelo + a√±o
            if modelo in preferencias_lower and a√±o in preferencias_lower:
                print(f"üîç DEBUG: Modelo + a√±o mencionados: {modelo} {a√±o}")
                return auto
        
        # Si la b√∫squeda es muy espec√≠fica (pocas palabras) y hay pocos resultados
        if len(preferencias.split()) <= 3 and len(autos_encontrados) <= 2:
            print(f"üîç DEBUG: B√∫squeda espec√≠fica con pocos resultados")
            return autos_encontrados[0]
        
        print(f"üîç DEBUG: No se detect√≥ inter√©s espec√≠fico")
        return None

class FinanzasTool(BaseTool):
    """
    Tool para calcular y otorgar planes de financiamiento.
    Calcula pagos basado en enganche, precio del auto, tasa 10% y plazos 3-6 a√±os.
    """
    
    name: str = "planes_financiamiento"
    description: str = "Calcula planes de financiamiento para autos con tasa fija del 10% anual y plazos de 3, 4, 5 o 6 a√±os. Usa esta tool cuando el usuario pregunte sobre financiamiento, pagos mensuales, enganches, o planes de pago para un auto."
    gestor_estados: GestorEstados = Field(exclude=True)
    telefono_actual: str = Field(exclude=True)
    
    def __init__(self, gestor_estados: GestorEstados, **kwargs):
        super().__init__(gestor_estados=gestor_estados, telefono_actual="", **kwargs)
    
    def _run(self, parametros_financiamiento: str) -> str:
        """
        Calcular plan de financiamiento
        
        Args:
            parametros_financiamiento: Par√°metros como precio, enganche, plazo
            
        Returns:
            Plan de financiamiento calculado
        """
        try:
            # Obtener el estado del usuario actual
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            
            # Registrar consulta en estado global
            estado.actualizar('ultima_consulta', f"financiamiento: {parametros_financiamiento}")
            estado.actualizar('tipo_consulta', 'calculo_financiamiento')
            
            print(f"üîç DEBUG FinanzasTool: Calculando financiamiento con: {parametros_financiamiento}")
            
            # Obtener precio del auto seleccionado
            auto_precio = estado.obtener('auto_precio')
            auto_info = estado.obtener_info_auto_completa()
            
            if not auto_precio:
                return self._respuesta_sin_auto_seleccionado()
            
            # Extraer enganche del texto
            enganche_especificado = self._extraer_enganche(parametros_financiamiento, auto_precio)
            
            print(f"üîç DEBUG FinanzasTool: Precio auto: ${auto_precio:,.0f}, Enganche: {enganche_especificado}")
            
            # Generar planes de financiamiento
            if enganche_especificado:
                # Si especific√≥ enganche, calcular para ese enganche espec√≠fico
                respuesta = self._generar_plan_especifico(auto_info, auto_precio, enganche_especificado, parametros_financiamiento)
                
            else:
                # Si no especific√≥ enganche, mostrar m√∫ltiples opciones
                respuesta = self._generar_opciones_multiples(auto_info, auto_precio)
            
            # Registrar que se proporcion√≥ financiamiento
            estado.actualizar('ultima_respuesta_tipo', 'planes_financiamiento')
            
            return respuesta
            
        except Exception as e:
            print(f"‚ùå ERROR en FinanzasTool: {e}")
            import traceback
            traceback.print_exc()
            return "Disculpa, ocurri√≥ un error al calcular el financiamiento. ¬øPodr√≠as proporcionar m√°s detalles sobre el enganche que tienes disponible?"
    
    def _respuesta_sin_auto_seleccionado(self) -> str:
        """Respuesta cuando no hay auto seleccionado"""
        return """Para calcular tu financiamiento necesito que primero selecciones un auto.
        
üîç Puedes buscar autos diciendo algo como:
‚Ä¢ "Quiero un Toyota con presupuesto de 300000"
‚Ä¢ "Mu√©strame autos del 2020"
‚Ä¢ "Busco un auto con bluetooth"

Una vez que selecciones un auto, podremos calcular las opciones de financiamiento perfectas para ti."""
    
    def _extraer_enganche(self, texto: str, precio_auto: float) -> Optional[float]:
        """
        Extraer enganche del texto del usuario
        
        Args:
            texto: Texto con par√°metros de financiamiento
            precio_auto: Precio del auto para calcular porcentajes
            
        Returns:
            Monto del enganche o None si no se especifica
        """
        texto_lower = texto.lower()
        
        # Buscar monto espec√≠fico
        import re
        patron_monto = r'(\d{1,3}(?:,?\d{3})*(?:\.\d{2})?)\s*(?:pesos|mx|mxn|de enganche|enganche)?'
        montos = re.findall(patron_monto, texto_lower.replace(',', ''))
        
        if montos:
            try:
                monto = float(montos[0].replace(',', ''))
                # Si es menor a 1000, probablemente son miles
                if monto < 1000:
                    monto *= 1000
                
                # Validar que el enganche no sea mayor al precio del auto
                if monto <= precio_auto:
                    return monto
            except:
                pass
        
        # Buscar porcentaje
        patron_porcentaje = r'(\d{1,2})\s*%'
        porcentajes = re.findall(patron_porcentaje, texto_lower)
        
        if porcentajes:
            try:
                porcentaje = float(porcentajes[0]) / 100
                if 0.05 <= porcentaje <= 0.80:  # Entre 5% y 80%
                    return precio_auto * porcentaje
            except:
                pass
        
        return None
    
    def _extraer_plazo(self, texto: str) -> Optional[int]:
        """
        Extraer plazo espec√≠fico del texto
        
        Args:
            texto: Texto con par√°metros de financiamiento
            
        Returns:
            Plazo en a√±os o None
        """
        import re
        texto_lower = texto.lower()
        
        # Buscar patrones como "3 a√±os", "a 4 a√±os", "financiar a 5 a√±os"
        patrones_plazo = [
            r'(\d)\s*a√±os?',
            r'a\s*(\d)\s*a√±os?',
            r'financiar\s*a\s*(\d)\s*a√±os?',
            r'plazo\s*de\s*(\d)\s*a√±os?'
        ]
        
        for patron in patrones_plazo:
            matches = re.findall(patron, texto_lower)
            if matches:
                try:
                    plazo = int(matches[0])
                    # Validar que est√© en el rango permitido (3-6 a√±os)
                    if 3 <= plazo <= 6:
                        print(f"üîç DEBUG: Plazo espec√≠fico detectado: {plazo} a√±os")
                        return plazo
                except:
                    pass
        
        return None
    
    def _calcular_pago_mensual(self, monto_financiar: float, a√±os: int) -> float:
        """
        Calcular pago mensual con f√≥rmula de financiamiento
        
        Args:
            monto_financiar: Monto a financiar
            a√±os: A√±os del plazo
            
        Returns:
            Pago mensual
        """
        if monto_financiar <= 0:
            return 0
        
        tasa_anual = 0.10  # 10% fijo
        tasa_mensual = tasa_anual / 12
        num_pagos = a√±os * 12
        
        # F√≥rmula de financiamiento: PMT = [P √ó r √ó (1 + r)^n] / [(1 + r)^n - 1]
        if tasa_mensual == 0:
            return monto_financiar / num_pagos
        
        factor = (1 + tasa_mensual) ** num_pagos
        pago_mensual = (monto_financiar * tasa_mensual * factor) / (factor - 1)
        
        return pago_mensual
    
    def _generar_plan_especifico(self, auto_info: Dict, precio_auto: float, enganche: float, parametros_financiamiento: str) -> str:
        """Generar plan para enganche espec√≠fico"""
        monto_financiar = precio_auto - enganche
        auto_descripcion = f"{auto_info.get('marca', 'N/A')} {auto_info.get('modelo', 'N/A')} {auto_info.get('a√±o', 'N/A')}"
        
        # Verificar si se especific√≥ un plazo espec√≠fico
        plazo_especifico = self._extraer_plazo(parametros_financiamiento)
        
        if plazo_especifico:
            # Plan espec√≠fico para un plazo
            pago_mensual = self._calcular_pago_mensual(monto_financiar, plazo_especifico)
            total_pagos = pago_mensual * plazo_especifico * 12
            total_intereses = total_pagos - monto_financiar
            
            respuesta = f"""üí∞ **Plan de financiamiento para {auto_descripcion}**

üöó Precio del auto: ${precio_auto:,.0f} MXN
üíµ Enganche: ${enganche:,.0f} MXN ({enganche/precio_auto*100:.1f}%)
üè¶ Monto a financiar: ${monto_financiar:,.0f} MXN
üìä Tasa de inter√©s: 10% anual

‚è±Ô∏è **Financiamiento a {plazo_especifico} a√±os ({plazo_especifico * 12} mensualidades)**
üí≥ Pago mensual: ${pago_mensual:,.0f} MXN
üí∞ Total a pagar: ${total_pagos:,.0f} MXN
üìà Total intereses: ${total_intereses:,.0f} MXN

¬øTe interesa esta opci√≥n? ¬°Puedo ayudarte con los siguientes pasos!"""
            
            # Guardar todos los valores en el estado
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            estado.actualizar('enganche', enganche)
            estado.actualizar('monto_financiar', monto_financiar)
            estado.actualizar('plazo_a√±os', plazo_especifico)
            estado.actualizar('pago_mensual', pago_mensual)
            
            print(f"üîç DEBUG: Guardado en estado - Enganche: ${enganche:,.0f}, Plazo: {plazo_especifico} a√±os, Pago mensual: ${pago_mensual:,.0f}")
            
        else:
            # Plan con m√∫ltiples opciones de plazo
            respuesta = f"""üí∞ **Plan de financiamiento para {auto_descripcion}**

üöó Precio del auto: ${precio_auto:,.0f} MXN
üíµ Enganche: ${enganche:,.0f} MXN ({enganche/precio_auto*100:.1f}%)
üè¶ Monto a financiar: ${monto_financiar:,.0f} MXN
üìä Tasa de inter√©s: 10% anual

**Opciones de pago mensual:**
"""
            
            for a√±os in [3, 4, 5, 6]:
                pago_mensual = self._calcular_pago_mensual(monto_financiar, a√±os)
                total_pagos = pago_mensual * a√±os * 12
                total_intereses = total_pagos - monto_financiar
                
                respuesta += f"""
‚è±Ô∏è **{a√±os} a√±os ({a√±os * 12} mensualidades)**
   üí≥ Pago mensual: ${pago_mensual:,.0f} MXN
   üí∞ Total a pagar: ${total_pagos:,.0f} MXN
   üìà Total intereses: ${total_intereses:,.0f} MXN
"""
            
            respuesta += "\n¬øTe interesa alguna de estas opciones? ¬°Puedo ayudarte con los siguientes pasos!"
            
            # Solo guardar enganche cuando no hay plazo espec√≠fico
            estado = self.gestor_estados.obtener_estado(self.telefono_actual)
            estado.actualizar('enganche', enganche)
            estado.actualizar('monto_financiar', monto_financiar)
        
        return respuesta
    
    def _generar_opciones_multiples(self, auto_info: Dict, precio_auto: float) -> str:
        """Generar m√∫ltiples opciones de enganche"""
        auto_descripcion = f"{auto_info.get('marca', 'N/A')} {auto_info.get('modelo', 'N/A')} {auto_info.get('a√±o', 'N/A')}"
        
        respuesta = f"""üí∞ **Opciones de financiamiento para {auto_descripcion}**
üöó Precio: ${precio_auto:,.0f} MXN | üìä Tasa: 10% anual

"""
        
        # Opciones de enganche: 10%, 20%, 30%
        enganches = [0.10, 0.20, 0.30]
        
        for porcentaje_enganche in enganches:
            enganche = precio_auto * porcentaje_enganche
            monto_financiar = precio_auto - enganche
            
            respuesta += f"""**üíµ Con {porcentaje_enganche*100:.0f}% de enganche (${enganche:,.0f} MXN):**
"""
            
            for a√±os in [3, 4, 5, 6]:
                pago_mensual = self._calcular_pago_mensual(monto_financiar, a√±os)
                respuesta += f"   ‚Ä¢ {a√±os} a√±os: ${pago_mensual:,.0f}/mes\n"
            
            respuesta += "\n"
        
        respuesta += "üí° ¬øQu√© enganche y plazo te conviene m√°s? Puedo darte m√°s detalles de cualquier opci√≥n."
        
        return respuesta

class AgentePrincipal:
    """
    Agente principal que coordina las tools y maneja la l√≥gica de conversaci√≥n.
    Utiliza OpenAI GPT-3.5-turbo como modelo base.
    Ahora gestiona estados separados por n√∫mero de tel√©fono.
    """
    
    def __init__(self):
        """Inicializar el agente principal con gestor de estados multiusuario"""
        
        # Inicializar gestor de estados (uno por tel√©fono)
        self.gestor_estados = GestorEstados()
        
        # Inicializar modelo OpenAI
        self.llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            temperature=0.3,
            openai_api_key=os.getenv('OPENAI_API_KEY')
        )
        
        # Inicializar tools con gestor de estados
        self.tools = [
            PropuestaValorTool(self.gestor_estados),
            CatalogoTool(self.gestor_estados),
            FinanzasTool(self.gestor_estados)
        ]
        
        # Crear prompt del sistema
        self.system_prompt = self._crear_prompt_sistema()
        
        # Crear agente
        self.agent = create_openai_tools_agent(
            self.llm, 
            self.tools, 
            self.system_prompt
        )
        
        # Crear executor
        self.agent_executor = AgentExecutor(
            agent=self.agent,
            tools=self.tools,
            verbose=True,
            return_intermediate_steps=True
        )
        
    def _crear_prompt_sistema(self) -> ChatPromptTemplate:
        prompt = ChatPromptTemplate.from_messages([
            ("system", """
            Eres un asistente de atenci√≥n al cliente especializado para Kavak M√©xico.
            
            INSTRUCCIONES IMPORTANTES:
            1. Cuando uses una herramienta, SIEMPRE utiliza su respuesta completa como base para tu respuesta final
            2. NO agregues respuestas gen√©ricas como "¬øHay algo m√°s en lo que pueda ayudarte?"
            3. Responde directamente con la informaci√≥n que te proporciona la herramienta
            
            Herramientas disponibles:
            - propuesta_valor: Para informaci√≥n sobre Kavak, beneficios, sedes, procesos, etc.
            - catalogo_autos: Para buscar veh√≠culos espec√≠ficos
            - planes_financiamiento: Para calcular opciones de pago
            
            Cuando el usuario haga una pregunta espec√≠fica, usa la herramienta apropiada y responde con esa informaci√≥n.
            """),
            ("user", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ])

        return prompt
    
    def _configurar_tools_para_usuario(self, telefono_usuario: str) -> None:
        """
        Configurar las tools para que usen el estado del usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario actual
        """
        for tool in self.tools:
            tool.telefono_actual = telefono_usuario
            
    def procesar_mensaje(self, mensaje: str, telefono_usuario: str) -> str:
        """
        Procesar mensaje del usuario y generar respuesta
        """
        try:
            # Configurar tools para el usuario actual
            self._configurar_tools_para_usuario(telefono_usuario)
            
            # Obtener estado del usuario
            estado_usuario = self.gestor_estados.obtener_estado(telefono_usuario)
            
            # Registrar el mensaje en el historial del usuario
            estado_usuario.actualizar('ultimo_mensaje', mensaje)
            
            print(f"üîç DEBUG: Procesando mensaje: {mensaje}")
            print(f"üîç DEBUG: Tools disponibles: {[tool.name for tool in self.tools]}")
            
            # Ejecutar agente
            respuesta = self.agent_executor.invoke({
                "input": mensaje
            })
            
            print(f"üîç DEBUG: Respuesta completa del agente: {respuesta}")
            print(f"üîç DEBUG: Pasos intermedios: {respuesta.get('intermediate_steps', [])}")
            
            # Extraer respuesta final
            respuesta_final = respuesta.get('output', 'Lo siento, no pude procesar tu mensaje.')
            
            # Registrar la respuesta en el estado del usuario
            estado_usuario.actualizar('ultima_respuesta', respuesta_final)
            
            return respuesta_final
            
        except Exception as e:
            print(f"‚ùå ERROR procesando mensaje para {telefono_usuario}: {e}")
            import traceback
            traceback.print_exc()
            return "Lo siento, ocurri√≥ un error procesando tu consulta. ¬øPodr√≠as intentar de nuevo?"
    
    def obtener_estado_actual(self, telefono_usuario: str) -> Dict[str, Any]:
        """
        Obtener el estado actual del agente para un usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
            
        Returns:
            Resumen del estado del usuario
        """
        estado_usuario = self.gestor_estados.obtener_estado(telefono_usuario)
        return estado_usuario.obtener_resumen()
    
    def reiniciar_conversacion(self, telefono_usuario: str) -> None:
        """
        Reiniciar la conversaci√≥n para un usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
        """
        self.gestor_estados.reiniciar_estado(telefono_usuario)
        print(f"Conversaci√≥n reiniciada para usuario: {telefono_usuario}")
    
    def obtener_historial(self, telefono_usuario: str) -> List[Dict[str, Any]]:
        """
        Obtener historial de acciones para un usuario espec√≠fico
        
        Args:
            telefono_usuario: N√∫mero de tel√©fono del usuario
            
        Returns:
            Lista de acciones realizadas por el usuario
        """
        estado_usuario = self.gestor_estados.obtener_estado(telefono_usuario)
        return estado_usuario.obtener('historial_acciones') or []